
// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'
apply plugin: 'idea'
sourceCompatibility = 1.8
targetCompatibility = 1.8

// define the properties file
ext.configFile = file "project.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}
config = project.ext.config


version = "${config.mod_version}"
if (hasProperty('appendBuildNumber')) {
    version = version + "-" + appendBuildNumber.toString()
} else {
    version = version + "-0"
}

group = "${config.group_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${config.mod_id}-${config.minecraft_version}"

minecraft {
    version = "${config.forge_version}"
    runDir = "run"

    replace "@VERSION@", project.version
    replace "omlib@[0.0.0,)", "omlib@[" + config.omlib_version + ",)"
	    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20161111"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}


processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

repositories {
    maven {
        name "IGW"
        url "http://maven.k-4u.nl/"
    }
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { // the repo from which to get NEI and stuff
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
    maven {
        name  "OC repo"
        url  "http://maven.cil.li/"
    }
    maven { // the repo from which to get EnderIO and tterrags mods
        name 'tterrag'
        url "http://maven.tterrag.com/"
    }
    maven {
        name  "ic2"
        url  "http://maven.ic2.player.to/"
    }
    maven {
        url 'http://maven.epoxide.xyz'
    }
    maven {
        url "http://tehnut.info/maven"
    }
    maven {
        url "http://maven.ironhide.de/"
    }
    maven { // JEI
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven { url = "http://dl.tsr.me/artifactory/libs-release-local" }
    ivy {
        url "http://ae-mod.info/builds"
        layout "pattern", {
            artifact "[module]-[revision](-[classifier])(.[ext])"
        }
    }
}

configurations {
    runtime.exclude group: 'ValkyrienWarfareRevamped', module: 'valkyrienwarfare'
}

def omlib_local = false
configure(projects.findAll( {it.name == 'OMLib'})) {
   omlib_local = true
}

def omt_local = false
configure(allprojects.findAll {it.name == 'OpenModularTurrets'}) {
    omt_local = true
}
if (rootProject.name == "OMTControl"){
    omlib_local = true
    omt_local = true
}

dependencies {
    compileOnly "mezz.jei:jei_${config.minecraft_version}:${config.jei_version}:api"
    deobfCompile "mcp.mobius.waila:Hwyla:${config.hwyla_version}_${config.minecraft_version}"
    compileOnly "mcjty.theoneprobe:TheOneProbe:${config.minecraft_version_short}-${config.top_version}"
    deobfCompile "li.cil.oc:OpenComputers:MC${config.minecraft_version}-${config.oc_version}:api"
    //compile "Azanor:Thaumcraft:${config.tc_version}:deobf@jar"
    compileOnly "net.industrial-craft:industrialcraft-2:${config.ic2_version}:dev"
    compileOnly "net.darkhax.tesla:Tesla:${config.minecraft_version}-${config.tesla_version}"
    if (!omlib_local) {
        compile "omtteam:omlib:${config.minecraft_version}-${config.omlib_version}:dev"
    } else {
        compile project(':OMLib')
    }
    if (!omt_local) {
        compile "omtteam:openmodularturrets:${config.minecraft_version}-${config.omt_version}:dev"
    } else {
        compile project(':OpenModularTurrets')
    }
    runtime "com.enderio:EnderIO:${config.minecraft_version}-${config.enderio_version}"
    runtime "com.enderio.core:EnderCore:${config.minecraft_version}-${config.endercore_version}"
    //runtime "com.github.azanor:baubles:${config.baubles_version}"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

tasks.build.dependsOn deobfJar, sourceJar

publishing {
    tasks.publish.dependsOn 'build'
    publications {
        mavenJava(MavenPublication) {
            groupId config.group_prefix
            version config.minecraft_version + "-" + project.version
            artifactId config.mod_id
            artifact jar
            artifact sourceJar
            artifact deobfJar
        }
    }
    repositories {
        mavenLocal()
    }
}
